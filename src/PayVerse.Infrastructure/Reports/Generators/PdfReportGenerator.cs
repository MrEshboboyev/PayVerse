using PayVerse.Application.Reports.Services;
using PayVerse.Domain.Entities.Reports;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;

namespace PayVerse.Infrastructure.Reports.Generators;

public sealed class PdfReportGenerator : IReportGenerator
{
    public async Task<string> GenerateAsync(FinancialReport report, CancellationToken cancellationToken)
    {
        var filePath = Path.Combine("GeneratedReports", $"Report_{report.Id}.pdf");

        var document = Document.Create(container => 
        {
            container.Page(page => 
            {
                page.Size(PageSizes.A4);
                page.Margin(2, Unit.Centimetre);

                page.Header().Text($"Report {report.Id}").SemiBold().FontSize(20);

                page.Content().PaddingVertical(1, Unit.Centimetre).Column(column => 
                {
                    column.Item().Text($"Start Date: {report.Period.StartDate:yyyy-MM-dd}");
                    column.Item().Text($"End Date: {report.Period.EndDate:yyyy-MM-dd}");
                    column.Item().Text($"Report Type: {report.Type}");
                    column.Item().Text($"Generated By: {report.GeneratedBy}");
                    column.Item().Text($"Status: {report.Status}");
                    column.Item().Text($"Generated At: {report.GeneratedAt:yyyy-MM-dd HH:mm:ss}");
                });

                page.Footer().AlignCenter().Text(x => 
                {
                    x.Span("Page ");
                    x.CurrentPageNumber();
                });
            });
        });

        using var ms = new MemoryStream();
        document.GeneratePdf(ms);
        await File.WriteAllBytesAsync(filePath, ms.ToArray(), cancellationToken);

        return filePath;
    }
}
